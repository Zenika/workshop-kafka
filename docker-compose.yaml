version: "2.1"
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:${version_confluent}
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - 2181:2181
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: confluentinc/cp-enterprise-kafka:${version_confluent}
    hostname: broker
    container_name: broker
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_LOG_RETENTION_HOURS: 6
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker:29092
      CONFLUENT_METRICS_REPORTER_ZOOKEEPER_CONNECT: zookeeper:2181
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: "true"
      CONFLUENT_SUPPORT_CUSTOMER_ID: "anonymous"
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"

  schema-registry:
    image: confluentinc/cp-schema-registry:${version_confluent}
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      - zookeeper
      - broker
    ports:
      - 8081:8081
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: zookeeper:2181

  kafka-connect:
    image: confluentinc/cp-kafka-connect:${version_confluent}
    hostname: kafka-connect
    container_name: kafka-connect
    depends_on:
      - zookeeper
      - broker
      - schema-registry
    ports:
      - 8083:8083
    healthcheck:
      disable: true
    environment:
      CONNECT_BOOTSTRAP_SERVERS: broker:29092
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: kafka-connect
      CONNECT_CONFIG_STORAGE_TOPIC: _connect-configs
      CONNECT_OFFSET_STORAGE_TOPIC: _connect-offsets
      CONNECT_STATUS_STORAGE_TOPIC: _connect-statuses
      CONNECT_KEY_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_REST_ADVERTISED_HOST_NAME: kafka-connect
      CONNECT_LOG4J_ROOT_LOGLEVEL: "INFO"
      CONNECT_LOG4J_LOGGERS: "org.apache.kafka.connect.runtime.rest=WARN,org.reflections=ERROR"
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components/"
      CONNECT_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
      CONNECT_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
      CLASSPATH: /usr/share/java/monitoring-interceptors/monitoring-interceptors-5.5.0.jar
      CONNECT_CONFIG_PROVIDERS: "file"
      CONNECT_CONFIG_PROVIDERS_FILE_CLASS: "org.apache.kafka.common.config.provider.FileConfigProvider"
    command:
      - bash
      - -c
      - |
        apt-get -qq update
        apt-get clean && rm -rf /tmp/* /var/lib/apt/lists/*
        confluent-hub install --no-prompt debezium/debezium-connector-mysql:0.10.0
        confluent-hub install --no-prompt confluentinc/kafka-connect-jdbc:latest
        cd /usr/share/confluent-hub-components/confluentinc-kafka-connect-jdbc/lib
        curl -k -SL "http://dev.mysql.com/get/Downloads/Connector-J/mysql-connector-java-5.1.37.tar.gz" | tar -xzf -
        #
        echo "Launching Kafka Connect worker"
        /etc/confluent/docker/run &
        #
        sleep infinity

  control-center:
    image: confluentinc/cp-enterprise-control-center:${version_confluent}
    hostname: control-center
    container_name: control-center
    depends_on:
      - zookeeper
      - broker
      - schema-registry
      - kafka-connect
    ports:
      - 9021:9021
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: "broker:29092"
      CONTROL_CENTER_ZOOKEEPER_CONNECT: "zookeeper:2181"
      CONTROL_CENTER_CONNECT_CONNECT_CLUSTER: "http://kafka-connect:8083"
      CONTROL_CENTER_KSQL_URL: "http://ksqldb-server:8088"
      CONTROL_CENTER_KSQL_ADVERTISED_URL: "http://ksqldb-server:8088"
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      PORT: 9021

  ksqldb-server:
    image: confluentinc/ksqldb-server:${version_ksqldb}
    hostname: ksqldb-server
    container_name: ksqldb-server
    depends_on:
      - schema-registry
      - control-center
      - kafka-connect
    ports:
      - 8088:8088
    volumes:
      - ./ksql-server:/ksql-server
    environment:
      KSQL_HOST_NAME: ksqldb-server
      KSQL_CONFIG_DIR: "/etc/ksql"
      KSQL_LOG4J_OPTS: "-Dlog4j.configuration=file:/etc/ksqldb/log4j.properties"
      KSQL_LISTENERS: "http://0.0.0.0:8088"
      KSQL_COMMIT_INTERVAL_MS: 0
      KSQL_CACHE_MAX_BYTES_BUFFERING: 0
      KSQL_KSQL_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      KSQL_BOOTSTRAP_SERVERS: "broker:29092"
      KSQL_KSQL_CONNECT_URL: http://kafka-connect:8083
      KSQL_KSQL_STREAMS_AUTO_OFFSET_RESET: "earliest"
      # Producer/Consumer Confluent Monitoring Interceptors for Control Center streams monitoring
      CLASSPATH: /usr/share/java/monitoring-interceptors/monitoring-interceptors-5.5.0.jar
      KSQL_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
      KSQL_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
      KSQL_CONFLUENT_MONITORING_INTERCEPTOR_BOOTSTRAP_SERVERS: "broker:29092"
#      KSQL_KSQL_QUERIES_FILE: /ksql-server/queries.sql
    command:
      - bash
      - -c
      - |
        mkdir /usr/share/java/monitoring-interceptors
        cd /usr/share/java/monitoring-interceptors
        curl -k -L https://packages.confluent.io/maven/io/confluent/monitoring-interceptors/5.5.0/monitoring-interceptors-5.5.0.jar -o monitoring-interceptors-5.5.0.jar
        echo "Launching ksqlDB server"
        /usr/bin/docker/run &
        #
        sleep infinity

  ksqldb-cli:
    # *-----------------------------*
    # To connect to the ksqldb:
    #   docker exec -it ksqldb-cli ksql http://ksqldb-server:8088
    # *-----------------------------*
    image: confluentinc/ksqldb-cli:${version_ksqldb}
    container_name: ksqldb-cli
    depends_on:
      - broker
      - kafka-connect
      - ksqldb-server
    entrypoint: /bin/sh
    tty: true

  workshop-docs:
    # *-----------------------------*
    # To connect to the documentation:
    #   http://localhost:80
    image: nginx:latest
    container_name: workshop-docs-webserver
    ports:
      - 80:80
    volumes:
      - ./asciidoc:/usr/share/nginx/html

  create-topics:
    image: confluentinc/cp-enterprise-kafka:${version_confluent}
    container_name: create-topics
    depends_on:
      - zookeeper
      - broker
    command: "bash -c 'echo Waiting for Kafka to be ready... && \
                cub kafka-ready -b broker:29092 1 300 && \
                echo Creating topics... && \
                kafka-topics --bootstrap-server broker:29092 --create --topic dc --replication-factor 1 --partitions 1 && \
                kafka-topics --bootstrap-server broker:29092 --create --topic dc_customers --replication-factor 1 --partitions 1 && \
                kafka-topics --bootstrap-server broker:29092 --create --topic dc_products --replication-factor 1 --partitions 1 && \
                kafka-topics --bootstrap-server broker:29092 --create --topic dc_purchase_orders --replication-factor 1 --partitions 1 && \
                kafka-topics --bootstrap-server broker:29092 --create --topic dc_purchase_order_details --replication-factor 1 --partitions 1 && \
                kafka-topics --bootstrap-server broker:29092 --create --topic dc_sales_orders --replication-factor 1 --partitions 1 && \
                kafka-topics --bootstrap-server broker:29092 --create --topic dc_sales_order_details --replication-factor 1 --partitions 1 && \
                kafka-topics --bootstrap-server broker:29092 --create --topic dc_suppliers --replication-factor 1 --partitions 1'"

  mysql:
    # *-----------------------------*
    # To connect to the DB:
    #   docker-compose exec mysql bash -c 'mysql -u root -p$MYSQL_ROOT_PASSWORD'
    # *-----------------------------*
    image: debezium/example-mysql:1.3
    container_name: mysql
    ports:
      - 3306:3306
    environment:
      - MYSQL_ROOT_PASSWORD=debezium
      - MYSQL_USER=mysqluser
      - MYSQL_PASSWORD=mysqlpw
    volumes:
      - ./mysql_schema.sql:/docker-entrypoint-initdb.d/mysql_schema.sql
    healthcheck:
      test: '/usr/bin/mysql --user=root --password=debezium --execute "SHOW DATABASES;"'
      interval: 5s
      timeout: 20s
      retries: 30

  dbtrans-simulator:
    container_name: db-trans-simulator
    depends_on:
      mysql:
        condition: service_healthy
    command: tail -f /dev/null
    build:
      context: ./db_transaction_simulator